@*This is just to have something here. Definitley isn't a wheel :( *@
@page "/wheelofrestaurants"
@using System;
@inject HttpClient Http;

<PageTitle> Wheel of Restaurants | LOLA</PageTitle>
<h1>Randomly Select a Restaurant</h1><br>

@if(restaurants != null)
{
    <ol>
    @foreach (var restaurant in restaurants)
    {
        
        <div class="row">
        <li><h3>@restaurant.Name</h3></li>
        @*This is for if we needed to remove a restaurant from consideration*@
        @*<button @onclick="@(()=>HideRestaurant(@restaurant.Id))">X</button></li>*@
        </div>
    }
    </ol>  
}
else
{
    <h4>Error: No restaurants in database! </h4>
}
<button @onclick="ChooseRestaurant" class="btn btn-sm btn-primary">Random Pick</button> 

@code {
    #nullable enable
    private Restaurant[]? restaurants;
    private Restaurant newRestaurant = new Restaurant();
    bool RandomPickActive = false;
    private string ChosenRestauraunt;

    protected override async Task OnInitializedAsync()
    {
        restaurants = await Http.GetFromJsonAsync<Restaurant[]>("restaurant/getallrestaurants");
    } 

    private async Task GetRestaurantrByRID(int id)
    {
        newRestaurant = await Http.GetFromJsonAsync<Restaurant>("restaurant/" + id.ToString());
    }

    protected async void HideRestaurant(int id)
    {
        //This is left empty becuase I'm not sure if there's even a point for users to not consider/hide a restaurant
    }

    private void ChooseRestaurant()
    {
        RandomPickActive = true;
        var random = new Random();
        int index = random.Next(restaurants.Length);
        ChosenRestauraunt = restaurants[index].Name;
    }
}
     @if(RandomPickActive)
    {
        <br><br>
        <h3>The Restaurant chosen is:</h3>
        <h1>@ChosenRestauraunt</h1>
    }