@page "/edituser"

@using LOLA.Shared;
@inject HttpClient Http;

<h1>Create a new User</h1>

<div class="row">
    <div class="col col-6">
        <input type="text" @bind-value="newUser.Name" class="form-control mb-3" placeholder="Name">
        <input type="email" @bind-value="newUser.Email" class="form-control mb-3" placeholder="Email"/>
        <input type="text" @bind-value="newUser.Password" class="form-control mb-3" placeholder="Password">
        <p style="color:red; font-size:20px">@errorMessage</p>
        <button class="btn btn-block btn-primary" @onclick="SubmitUser">Submit</button>

        @if (users == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table table-responsive">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Password</th>
                        <th>Edit</th>
                        <th>Delete</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in users)
                    {
                        <tr>
                            <td>@user.Id</td>
                            <td>@user.Name</td>
                            <td>@user.Email</td>
                            <td>@user.Password</td>
                            <td>
                                <button @onclick="@(()=>GetUserById(@user.Id))" class="btn btn-sm btn-primary" >Edit</button>
                            </td>
                            <td>
                                <button @onclick="@(()=>DeleteUser(@user.Id))" class="btn btn-sm btn-primary">Delete</button>
                            </td> 
                        </tr>
                    }
                </tbody>
            </table>
        }
   </div>
</div>

@code {
    #nullable enable
    private User[]? users;
    private User newUser = new User();
    private string errorMessage = string.Empty;
    private bool edit = false;  // if true add user if false edit user

// getting all users
//the OnInitialexAsync is used to handle incomplete async actions at render
    protected override async Task OnInitializedAsync()
    {
        users = await Http.GetFromJsonAsync<User[]>("user/getallusers");
    } 

//get user id to edit user 
    private async Task GetUserById(int id)
    {
        errorMessage = "";
        newUser = await Http.GetFromJsonAsync<User>("user/"+id.ToString());
        edit = true;
    }

// add or edit user 
    private async Task SubmitUser()
    {
        errorMessage = "";
        Console.WriteLine("submit user");
        Console.WriteLine("add user");
        Console.WriteLine("email: " + newUser.Email);
        Console.WriteLine("password: " +newUser.Password);
        Console.WriteLine("user: " + newUser);

        if(newUser.Email != null && newUser.Password != null &&  newUser.Email != "" && newUser.Password != "")
        {
            if(edit == false)
            {
                await Http.PostAsJsonAsync<User>("user/postuser", newUser);
                await OnInitializedAsync();
                newUser = new User();
            }
            else
            {
                Console.WriteLine("edit user");

                await Http.PutAsJsonAsync<User>("user/"+newUser.Id,newUser);
                await OnInitializedAsync();
                edit = false;
                newUser = new User();
            }
        }
        else
        {
            errorMessage = "Email and Password Required!";
        }
    }

// delete user 
    private async Task DeleteUser(int id)
    {
        await Http.DeleteAsync("user/"+id.ToString());
        await OnInitializedAsync();
    }
}